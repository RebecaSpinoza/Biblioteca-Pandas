# -*- coding: utf-8 -*-
"""AulaIA_09_10_11_12_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aBRWWkVic3eVZR3hOZ76YePs1u4pJTym

## **Aula de Python sobre a Biblioteca PANDAS**

Biblioteca usada para manipulação e análise de dados.

* Series
* Data Frame

**SERIES**
"""

#Importando a Biblioteca PANDAS
import pandas as pd

#Criando a Series "notas"
notas = pd.Series([7,8,9,10])
notas

#Visualizando os itens do array
notas.values

#Visualizando os índices do array
notas.index

"""**DATA FRAME**"""

#Importando a biblioteca PANDAS
import pandas as pd

#Leitura do conjunto de dados
pd.read_csv('aluguel.csv')

#Importa  o arquivo com melhor visualização
dados = pd.read_csv('aluguel.csv', sep=';')
dados

from google.colab import drive
drive.mount('/content/drive')

type(dados)

#Visualizando informações gerais sobre o meu conjunto de dados
dados.info()

#Visualizando somente os tipos de dados que contém o meu conjunto de dados
dados.dtypes

#Utilizando o Data Frame
pd.DataFrame(dados.dtypes)

dados.shape

#Melhorando a visualização dos dados do SHAPE
print(f"O conjunto de dados possui {dados.shape[0]} linhas e {dados.shape[1]} colunas.")

#Visualizando as 10 primeiras linhas do conjunto de dados
dados.head(10)

"""**Selecionando a coluna TIPO para tratamento das informações**"""

dados['Tipo']

#Verificando a estrutura do conjunto de dados
tipo_imoveis = dados['Tipo']
type(tipo_imoveis)

#Tratando as repetições do Tipo de Imóveis com o comando UNIQUE
tipo_imoveis.unique()

#Verificando a quantidade de tipos de imóveis
tipo_imoveis.unique().shape[0]

#Excluindo as repetições do conjunto de dados
tipo_imoveis.drop_duplicates(inplace=True)
tipo_imoveis

tipo_imoveis=pd.DataFrame(tipo_imoveis)
tipo_imoveis

tipo_imoveis.shape

type(tipo_imoveis)

tipo_imoveis

tipo_imoveis.index

"""**Arrumando os índices do conjunto de dados**"""

#Ajustando os índices com o FOR
for i in range(tipo_imoveis.shape[0]):
  print(i)

#Ajustando os índices com o RANGE do PANDAS
tipo_imoveis.index=range(tipo_imoveis.shape[0])
tipo_imoveis

tipo_imoveis.index

tipo_imoveis.reset_index()

#Ajustando os índices com o RESET_INDEX
tipo_imoveis.reset_index(inplace=False, drop=True)

"""## **AULA 10**

**2a PARTE COM A BIBLIOTECA PANDAS**

1. Criar uma variável para armazenar os imóveis do tipo Residencial
2. Exportar essa base para um novo CSV chamado "aluguel_residencial.csv"
"""

#Importar a biblioteca PANDAS
import pandas as pd

#Leitura do arquivo CSV
aluguel=pd.read_csv("aluguel.csv", sep=";")
aluguel.head(20)

#Busca os tipos de imóveis no conjunto de dados
aluguel['Tipo'].unique()

#Criação da lista de imóveis do Tipo Residencial que vamos armazenar
residencial=["Quitinete","Casa","Apartamento","Casa de Condomínio","Casa de Vila"]
residencial

#Busca os tipos residenciais no conjunto de dados
aluguel['Tipo'].isin(residencial)

aluguel['Tipo'].isin(residencial).head(20)

#Guardar os registros residenciais
so_residenciais=aluguel['Tipo'].isin(residencial)
so_residenciais

#Guarda todas as informações dos imóveis residenciais
aluguel_residencial=aluguel[so_residenciais]
aluguel_residencial.head(20)

#Confirma os tipos de imóveis armazenado no novo conjunto de dados
aluguel_residencial["Tipo"].unique()

#Verifica a quantidade de imóveis
aluguel_residencial.shape

#Outro comando para obter a quantidade de linhas do conjunto de dados
len(aluguel_residencial)

#Exibe bonito pro CHEFE
print(f"O conjunto de dados possui {aluguel_residencial.shape[0]} linhas e {aluguel_residencial.shape[1]} colunas.")

aluguel_residencial.info()

#Reinicia o índice do conjunto de dados
aluguel_residencial.reset_index(inplace=True, drop=True)
aluguel_residencial

aluguel_residencial.info()

#Exportar os imóveis residenciais para um novo CSV
aluguel_residencial.to_csv("aluguel_residencial.csv", sep=";")

#Importa o novo arquivo CSV
aluguel_residencial2=pd.read_csv("aluguel_residencial.csv", sep=";")
aluguel_residencial2

#Exporto novamente o arquivo sem o índice
aluguel_residencial.to_csv("aluguel_residencial.csv", sep=";", index=False)

#Leitura do novo arquivo CSV
aluguel_residencial2=pd.read_csv("aluguel_residencial.csv", sep=";")
aluguel_residencial2

"""**O próximos passos são:**
1. Selecionar os imóveis do tipo Apartamento
2. Selecionar os imóveis do tipo Casa (casa, casa de condomínio, casa de vila)
3. Buscar os imóveis que tenham área entre 50 e 110m²
4. Buscar os imóveis que tenham pelo menos 4 quartos e aluguel menor que R$ 2.500,00
"""

#Selecionando apenas os imóveis do tipo Apartamento
selecionar_apto=aluguel_residencial2["Tipo"] == "Apartamento"
num_apto=aluguel_residencial2[selecionar_apto].shape[0]
num_apto

"""# **Aula 11**
- Cumprir os itens 2,3 e 4
"""

#Selecionando apenas os imóveis do tipo CASA
selecionar_casas=(aluguel_residencial2["Tipo"]=="Casa") | (aluguel_residencial2["Tipo"]=="Casa de Condomínio") | (aluguel_residencial2["Tipo"]=="Casa de Vila")
num_casas=aluguel_residencial2[selecionar_casas].shape[0]
num_casas

#Selecionando imóveis com mais de 50m² e menores que 110m²
selecionar_metros=(aluguel_residencial2["Area"]>=50) & (aluguel_residencial2["Area"]<=110)
num_metros=aluguel_residencial2[selecionar_metros].shape[0]
num_metros

#Selecionando imóveis que tenham pelo menos 4 quartos e valor de aluguel menor que R$ 2.500,00
selecionar_valor=(aluguel_residencial2["Quartos"]>=4) & (aluguel_residencial2["Valor"]<2500.0)
num_valor=aluguel_residencial2[selecionar_valor].shape[0]
num_valor

"""**Exibindo os resultados da mineração**"""

print(f"O número de Aptos é {num_apto}")
print(f"O número de Casas é {num_casas}")
print(f"O número de imóveis entre 50m² e 110m² é {num_metros}")
print(f"O número de imóveis com 4 quartos e valor de aluguel abaixo de R$ 2.500,00 é {num_valor}")

"""**Tratamento dos dados NaN (Nulos ou Faltantes)**"""

aluguel_residencial2.info()

#Exibe todos os registros que estão Nulos
aluguel_residencial2.isnull()

#Exibe os ddos que não são nulos
aluguel_residencial2.notnull()

#Ver no conjunto de dados as linhas que estão NaN
aluguel_residencial2[aluguel_residencial2["Valor"].isnull()]

#Excluindo os valores nulos (NaN)
aluguel_total=aluguel_residencial2.shape[0]
aluguel_residencial2.dropna(subset=["Valor"], inplace=True)
aluguel_tratado_nao_nulos=aluguel_residencial2.shape[0]
print(f"O conjunto de dados possuia {aluguel_total} e após a remoção dos NaN ficou com {aluguel_tratado_nao_nulos}")

#Conferindo a remoção dos NaN
aluguel_residencial2[aluguel_residencial2["Valor"].isnull()]

#Pesquisa os imóveis que estão sem valor de condominio
aluguel_residencial2[aluguel_residencial2["Condominio"].isnull()].shape[0]

#Filtra os dados de condomínio NaN somente para Apartamento
selecionar=(aluguel_residencial2["Tipo"]=="Apartamento") & (aluguel_residencial2["Condominio"].isnull())
selecionar

#Preencher com 0 as colunas que tem NaN no Condomínio
aluguel_residencial2=aluguel_residencial2.fillna({"Condominio":0})

aluguel_residencial2[aluguel_residencial2["Condominio"].isnull()].shape[0]

"""**Desafio: verificar os NaN na coluna IPTU e ajustar. Também colocar como 0.**"""

#Preencher com 0 as colunas que tem NaN no IPTU
aluguel_residencial2=aluguel_residencial2.fillna({"IPTU":0})
aluguel_residencial2[aluguel_residencial2["IPTU"].isnull()].shape[0]

"""## **Começando a plotagem de gráficos**"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

"""**Gráfico para exibição da % de imóveis por tipo**"""

#Configurando o gráfico
fig=plt.figure(figsize=(6,6))
eixo=fig.add_axes([0,0,1,1])

#Monta a lista dos tipos de imóveis
tipos_imoveis=aluguel_residencial2['Tipo'].unique()

#Conta a quantidade de imóveis do tipo Quitinete
selecionar_quitinete=aluguel_residencial2["Tipo"] == "Quitinete"
num_quitinete=aluguel_residencial2[selecionar_quitinete].shape[0]

#Separa a quantidade de casas por tipo
num_casa=(aluguel_residencial2[aluguel_residencial2["Tipo"]=="Casa"]).shape[0]
num_casavila=(aluguel_residencial2[aluguel_residencial2["Tipo"]=="Casa de Vila"]).shape[0]
num_casacondominio=(aluguel_residencial2[aluguel_residencial2["Tipo"]=="Casa de Condomínio"]).shape[0]

#Monta os dados para o gráfico
total=[num_quitinete,num_casa,num_casavila,num_casacondominio]
tipo=["Quitinete","Casa","Casa de Vila","Casa de Condomínio"]

eixo.pie(total,labels=tipo,autopct="%.1f%%",textprops={'fontsize':14})

"""**Gráfico para exibir a média de preço por tipo de imóvel**"""

#Calcula a média do valor do aluguel
media_aluguel=aluguel_residencial2.groupby('Tipo')["Valor"].mean()
nomes_imoveis=["Apartamento","Casa","Casa de Condomínio","Casa de Vila","Quitinete"]

#Configura o gráfico
fig, ax = plt.subplots(figsize=(12,8))

#Cores das barras do gráfico
cor=["yellow","orange","green","blue","pink"]

ax.bar(nomes_imoveis,media_aluguel,color=cor,edgecolor="black",width=0.6)
ax.set_title("Média de valor de aluguel por imóvel", fontsize=20)
ax.set_xlabel("Tipo de imóvel", fontsize=15)
ax.set_ylabel("Valor médio de aluguel", fontsize=15)

#Exibe as médias de preço do aluguel nas barras
for imoveis,media in enumerate(media_aluguel):
  plt.text(x=imoveis-.28,y=media+100,s=f"R$ {media:.2f}",fontdict=dict(fontsize=13))
plt.tight_layout()
plt.show()

"""# Grafico para exibir os imoveis por bairro
1.filtrar os imoveis dos bairros: Barra da Tijuca, Copacabana, Flamengo, Ipanema,Leblon e Tijuca.

2.Contar quantos imoveis estão disponíveis para alugar em cada um desses bairros

3.Plotar o resultado em um grafico de barras.

**UTILIZAR ALUGUEL_PRESENCIAL
"""

bairroBT=(aluguel_residencial[aluguel_residencial["Bairro"]=="Barra da Tijuca"]).shape[0]

bairroB=(aluguel_residencial[aluguel_residencial["Bairro"]=="Botafogo"]).shape[0]

bairroC=(aluguel_residencial[aluguel_residencial["Bairro"]=="Copacabana"]).shape[0]

bairroF=(aluguel_residencial[aluguel_residencial["Bairro"]=="Flamengo"]).shape[0]

bairroI=(aluguel_residencial[aluguel_residencial["Bairro"]=="Ipanema"]).shape[0]

bairroL=(aluguel_residencial[aluguel_residencial["Bairro"]=="Leblon"]).shape[0]

bairroT=(aluguel_residencial[aluguel_residencial["Bairro"]=="Tijuca"]).shape[0]



nome_bairro = [bairroBT, bairroB, bairroC, bairroF, bairroI, bairroL, bairroT]



bairros=["Barra da Tijuca","Botafogo", "Copacabana", "Flamengo", "Ipanema", "Leblon", "Tijuca"]





#Cores do gráfico

cores=["#BF0928", "#7F041A", "#FF0C36", "#40030D", "#E50A31","#F23054", "#A62424"]



#Configurando o Gráfico

fig, ax = plt.subplots(figsize=(12,8))

ax.bar(bairros, nome_bairro, color=cores, edgecolor="black", width=0.6)

ax.set_title("Bairros disponíveis para aluguel", fontsize=20)

ax.set_xlabel("Nome do Bairro", fontsize=15)

ax.set_ylabel("Quantidade de imóveis", fontsize=15)



#Exibe as médias de preço do aluguel nas barras

for bairro, qtd in enumerate(nome_bairro):

  plt.text(x = bairro-.16, y = qtd+100, s=qtd , fontdict=dict(fontsize=13))

plt.tight_layout()

plt.show()

#codigo acima usando o count
#definição dos bairros
bairros=["Barra da Tijuca","Boata Fogo","Copacabna","Flamengo","Ipanema","Leblon","Tijuca"]
selecionar = aluguel_residencial["Bairro"].isin(bairros)
bairros_selecionados = aluguel_residencial[selecionar]

#contagem dos imoveis
total_bairro=bairros_selecionados.groupby('Bairro')["Tipo"].count()
total_bairro

"""#Exibir detalhes dos imoveis localizados na Barra da Tijuca

1.Filtrar os imóveis da Barra da Tijuca

2.Contar quantos imóveis estão disponíveis para aluguel por TIPO

3.Plotar no gráfico.

"""

so_bar = aluguel_residencial[aluguel_residencial["Bairro"].isin(["Barra da Tijuca"])]

so_bar

tipo = ['Quitinete','Casa','Apartamento','Casa de Condomínio','Casa de Vila']

q = (so_bar[(so_bar['Tipo']=='Quitinete')])['Tipo'].count()
c = (so_bar[(so_bar['Tipo']=='Casa')])['Tipo'].count()
a = (so_bar[(so_bar['Tipo']=='Apartamento')])['Tipo'].count()
cc = (so_bar[(so_bar['Tipo']=='Casa de Condomínio')])['Tipo'].count()
cv = (so_bar[(so_bar['Tipo']=='Casa de Vila')])['Tipo'].count()

c_tipo = [q, c, a, cc, cv]
print (c_tipo)

#filtrando o bairro
cor=["#ED0003","#FF8600","#FFFE37", "#01FE01", "#0EB3CF","#3500FF", "#8C00FC"]
plt.subplots(figsize=(12,8))
plt.bar(tipo, c_tipo, color=cor)
plt.ylabel('Quantidade de imóveis')
plt.xlabel('Tipos de imóveis')
plt.title('Quantidade dos tipos imóveis na Barra da Tijuca')

for tipos, qt in enumerate(c_tipo):
  plt.text(x=tipos-.16, y=qt+50, s=qt, fontdict=dict(fontsize=13))

plt.tight_layout()
plt.show()

#grafico de pizza expandido
explodir =[0.3,0.1,0.1,0.1,0.4]
fig=plt.figure(figsize=(8,8))
eixo = fig.add_axes([0,0,1,1])

eixo.pie(c_tipo, labels=tipo, autopct='%.1f%%', textprops={'fontsize':14}, explode=explodir, shadow=True, startangle=45)